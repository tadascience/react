[{"path":"https://tada.science/react/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 react authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://tada.science/react/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Romain François. Author, maintainer.","code":""},{"path":"https://tada.science/react/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"François R (2024). react: Reactivity Helper 'shiny'. R package version 2024.1.0.9000, https://react.tada.science/, https://github.com/tadascience/react.","code":"@Manual{,   title = {react: Reactivity Helper for 'shiny'},   author = {Romain François},   year = {2024},   note = {R package version 2024.1.0.9000, https://react.tada.science/},   url = {https://github.com/tadascience/react}, }"},{"path":"https://tada.science/react/index.html","id":"react","dir":"","previous_headings":"","what":"Reactivity Helper for shiny","title":"Reactivity Helper for shiny","text":"goal react help reactivity, instead calling foo reactive expression foo() can call react$foo similar one calls input$bar inputs, alternatively react[foo] react[foo()]. benefit makes easier spot calls reactive expressions server code.","code":""},{"path":"https://tada.science/react/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Reactivity Helper for shiny","text":"can install development version react GitHub :","code":"pak::pak(\"tadascience/react\")"},{"path":"https://tada.science/react/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Reactivity Helper for shiny","text":"Take shiny example: react can rewrite plot output one , depending taste.","code":"server <- function(input, output) {    dataInput <- reactive({     getSymbols(input$symb, src = \"yahoo\",                from = input$dates[1],                to = input$dates[2],                auto.assign = FALSE)   })    output$plot <- renderPlot({     chartSeries(dataInput(), theme = chartTheme(\"white\"),                 type = \"line\", log.scale = input$log, TA = NULL)   })  } # react$ is similar conceptually to how input$ works   output$plot <- renderPlot({     chartSeries(react$dataInput, theme = chartTheme(\"white\"),                 type = \"line\", log.scale = input$log, TA = NULL)   })      # react[]    output$plot <- renderPlot({     chartSeries(react[dataInput], theme = chartTheme(\"white\"),                 type = \"line\", log.scale = input$log, TA = NULL)   })      # react[()] so that you still have the calling a function feel   #           and you just sourround it   output$plot <- renderPlot({     chartSeries(react[dataInput()], theme = chartTheme(\"white\"),                 type = \"line\", log.scale = input$log, TA = NULL)   })"},{"path":"https://tada.science/react/reference/react.html","id":null,"dir":"Reference","previous_headings":"","what":"Reactivity helper — react","title":"Reactivity helper — react","text":"react object gives alternative syntax call shiny reactive expressions.","code":""},{"path":"https://tada.science/react/reference/react.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reactivity helper — react","text":"","code":"react(x)"},{"path":"https://tada.science/react/reference/react.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reactivity helper — react","text":"benefit makes easier spot code.","code":""},{"path":"https://tada.science/react/reference/react.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reactivity helper — react","text":"","code":"# This works by invoking the function from the parent environment # with no arguments ... foo <- function() {   42 } react$foo #> [1] 42 react[foo] #> Error in get(as.character(expr, frame)): object 'foo' not found react[foo()] #> Error in get(as.character(expr[[1L]], frame)): object 'foo' not found  # You can also use `react()` as a function to wrap the # reactive call react(foo()) #> [1] 42  # The benefit is that `react()` can also wrap `input$` calls # so that you easily recognize reactivity  if (FALSE) {   # ... but it only becomes relevant when used in shiny   # server code, e.g. this app from the shiny page   # with react$dataInput instead of dataInput()   server <- function(input, output) {      dataInput <- reactive({       getSymbols(input$symb, src = \"yahoo\",           from = input$dates[1],             to = input$dates[2],             auto.assign = FALSE)     })      output$plot <- renderPlot({        chartSeries(react$dataInput, theme = chartTheme(\"white\"),               type = \"line\", log.scale = input$log, TA = NULL)     })   } }"},{"path":[]},{"path":"https://tada.science/react/news/index.html","id":"react-202401001","dir":"Changelog","previous_headings":"","what":"react 2024.01.001","title":"react 2024.01.001","text":"Initial CRAN submission.","code":""}]
